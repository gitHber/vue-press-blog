(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{153:function(n,a,t){"use strict";t.r(a);var e=t(0),l=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,a=n.$createElement,t=n._self._c||a;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"es5实现继承"}},[n._v("es5实现继承")]),t("ul",[t("li",[n._v("父类实现")])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 定义一个动物类\nfunction Animal(name){\n    this.name = name || 'Animal'\n    this.sleep = function(){\n        console.log(this.name+'正在睡觉')\n    }\n}\n// 原型方法\nAnimal.prototype.eat = function(food){\n    console.log(this.name+'正在吃'+food)\n}\n")])])]),t("h4",{attrs:{id:"_1-原型链继承"}},[n._v("1.原型链继承")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Cat(){\n}\nCat.prototype = new Animal()\nCat.prototype.name = 'cat'\n\n// Test code\nvar cat = new Cat()\nconsole.log(cat.name) // cat\nconsole.log(cat.eat('fish'));\nconsole.log(cat.sleep());\nconsole.log(cat instanceof Animal); //true \nconsole.log(cat instanceof Cat); //true\n")])])]),t("ul",[t("li",[n._v("缺点")])]),t("ol",[t("li",[n._v("新增原型方法，必须先指向父类的实例")]),t("li",[n._v("不能多继承")]),t("li",[n._v("原型对象的引用属性共享")])]),t("h4",{attrs:{id:"_2-构造继承"}},[n._v("2.构造继承")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Cat(name){\n    Animal.call(this)\n    this.name = name || 'Tom'\n}\n// Test Code\nvar cat = new Cat();\nconsole.log(cat.name);\nconsole.log(cat.sleep());\nconsole.log(cat instanceof Animal); // false\nconsole.log(cat instanceof Cat); // true\n")])])]),t("ul",[t("li",[n._v("特点")])]),t("ol",[t("li",[n._v("引用属性不在公用")]),t("li",[n._v("可以多继承")])]),t("ul",[t("li",[n._v("缺点")])]),t("ol",[t("li",[n._v("实例不是父类的实例")]),t("li",[n._v("不能继承原型方法")]),t("li",[n._v("无法实现函数复用，每个字类都有父类实例函数的副本，影响性能")])]),t("h4",{attrs:{id:"_3-实例继承"}},[n._v("3.实例继承")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Cat(name){\n    var instance = new Animal()\n    instance.name = name || 'Tom'\n    return instance\n}\n// Test Code\nvar cat = new Cat();\nconsole.log(cat.name);\nconsole.log(cat.sleep());\nconsole.log(cat instanceof Animal); // true\nconsole.log(cat instanceof Cat); // false\n")])])]),t("ul",[t("li",[n._v("缺点")])]),t("ol",[t("li",[n._v("实例是父类的实例")]),t("li",[n._v("不支持多继承")])]),t("h4",{attrs:{id:"_4-拷贝继承"}},[n._v("4.拷贝继承")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Cat(name){\n    var animal = new Animal()\n    for(var p in animal){\n        Cat.prototype[p] = animal[p]\n    }\n    Cat.prototype.name = name || 'Tom'\n}\n// Test Code\nvar cat = new Cat();\nconsole.log(cat.name);\nconsole.log(cat.sleep());\nconsole.log(cat instanceof Animal); // false\nconsole.log(cat instanceof Cat); // true\n")])])]),t("ul",[t("li",[n._v("缺点")])]),t("ol",[t("li",[n._v("效率低")]),t("li",[n._v("不支持枚举的属性，无法继承")])]),t("h4",{attrs:{id:"_5-组合继承"}},[n._v("5.组合继承")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Cat(name){\n    Animal.call(this)\n    this.name = name || Tom\n}\nCat.prototype = new Animal()\nCat.prototype = Cat\n// Test Code\nvar cat = new Cat();\nconsole.log(cat.name);\nconsole.log(cat.sleep());\nconsole.log(cat instanceof Animal); // true\nconsole.log(cat instanceof Cat); // true\n")])])]),t("ul",[t("li",[n._v("缺点")])]),t("ol",[t("li",[n._v("调用了两次父类构造函数，生成两份实例")])]),t("h4",{attrs:{id:"_6-寄生组合继承"}},[n._v("6. 寄生组合继承")]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Cat(name){\n    Animal.call(this)\n    this.name = name || 'Tom'\n}\n(function(){\n    var Super = function(){}\n    Super.prototype = Animal.prototype\n    Cat.prototype = new Super()\n    Cat.prototype.constructor = Cat\n})()\n// Test Code\nvar cat = new Cat();\nconsole.log(cat.name);\nconsole.log(cat.sleep());\nconsole.log(cat instanceof Animal); // true\nconsole.log(cat instanceof Cat); //true\n")])])]),t("ul",[t("li",[n._v("实现复杂")])])])}],!1,null,null,null);a.default=l.exports}}]);